{"version":3,"sources":["src/common/trigger-method.js","src/common/monitor-view-events.js","src/common/bind-events.js","src/common/bind-requests.js","src/mixins/behaviors.js","src/utils/get-unique-event-name.js","src/config/features.js","src/mixins/triggers.js","src/utils/destroy-backbone-view.js","src/common/build-region.js","src/config/behaviors-lookup.js","src/utils/proxy.js","src/utils/extend.js","src/utils/deprecate.js","src/common/is-node-attached.js","src/common/merge-options.js","src/common/get-option.js","src/common/normalize-methods.js","src/error.js","src/utils/set-options.js","src/mixins/common.js","src/mixins/radio.js","src/object.js","src/mixins/dom.js","src/template-cache.js","src/utils/invoke.js","src/mixins/delegate-entity-events.js","src/mixins/ui.js","src/mixins/view.js","src/region.js","src/mixins/regions.js","src/config/renderer.js","src/view.js","src/utils/emulate-collection.js","src/child-view-container.js","src/collection-view.js","src/composite-view.js","src/behavior.js","src/application.js","src/app-router.js","src/backbone.marionette.js"],"names":["getEventName","match","prefix","eventName","toUpperCase","triggerMethod","event","args","Array","_len","_key","arguments","methodName","getOnMethodName","method","getOption","call","this","result","_","isFunction","apply","trigger","triggerMethodOn","context","_len2","_key2","triggerMethodChildren","view","shouldTrigger","_getImmediateChildren","each","child","shouldTriggerAttach","_isAttached","shouldAttach","shouldTriggerDetach","shouldDetach","triggerDOMRefresh","_isRendered","handleBeforeAttach","handleAttach","handleBeforeDetach","handleDetach","handleRender","monitorViewEvents","_areViewEventsMonitored","on","bindFromStrings","target","entity","evt","methods","actionName","methodNames","split","MarionetteError","iterateEvents","bindings","isObject","isString","bindEvents","unbindEvents","iterateReplies","channel","normalizedRadioRequests","normalizeMethods","bindRequests","unbindRequests","getBehaviorClass","options","key","behaviorClass","Marionette","Behaviors","behaviorsLookup","parseBehaviors","behaviors","chain","map","BehaviorClass","_options","behavior","nestedBehaviors","concat","flatten","value","uniqueName","selector","uniqueId","join","isEnabled","name","FEATURES","setEnabled","state","buildViewTrigger","triggerDef","shouldPreventDefault","preventDefault","shouldStopPropagation","stopPropagation","destroyBackboneView","supportsDestroyLifecycle","remove","_isDestroyed","buildRegionFromDefinition","definition","defaults","opts","extend","el","buildRegionFromObject","regionClass","RegionClass","omit","fields","model","pick","getModel","proxy","Backbone","Model","deprecate","message","test","prev","next","url","DEV_MODE","undefined","_cache","_warn","_console","console","warn","log","noop","isNodeAttached","document","documentElement","contains","parentNode","mergeOptions","keys","option","optionName","hash","reduce","normalizedHash","_this","splitter","memoize","replace","errorProps","Error","version","error","captureStackTrace","urlRoot","setOptions","CommonMixin","_setOptions","RadioMixin","channelName","Radio","_channel","radioEvents","radioRequests","_destroyRadio","stopReplying","ClassOptions","MarionetteObject","cid","cidPrefix","_initRadio","initialize","prototype","Events","stopListening","DomMixin","createDocumentFragment","children","$","append","sibling","before","newEl","oldEl","parent","replaceChild","contents","detach","html","TemplateCache","templateId","cachedTemplate","templateCaches","load","i","length","compiledTemplate","template","loadTemplate","compileTemplate","$template","findEls","rawTemplate","_invoke","invokeMap","invoke","BehaviorsMixin","_behaviors","_getBehaviors","triggers","_toConsumableArray","events","DelegateEntityEventsMixin","collection","_undelegateEntityEvents","modelEvents","collectionEvents","delegateEventSplitter","getUniqueEventName","TriggersMixin","normalizeUIKeys","ui","memo","val","normalizedKey","normalizeUIString","uiString","r","slice","normalizeUIValues","properties","isArray","property","propertyVal","UIMixin","uiBindings","_getUIBindings","_uiBindings","_ui","$el","_this2","ViewMixin","eventsArg","_proxyBehaviorViewProperties","_buildEventProxies","viewEvents","_getEvents","combinedEvents","_getBehaviorEvents","_getBehaviorTriggers","getTriggers","View","delegateEvents","_getViewTriggers","_delegateEntityEvents","_delegateBehaviorEntityEvents","_undelegateBehaviorEntityEvents","unbindUIElements","removeEl","_removeChildren","_destroyBehaviors","_bindUIElements","_bindBehaviorUIElements","_unbindUIElements","_unbindBehaviorUIElements","_getUI","ret","_triggerEventOnBehaviors","_childViewEvents","_childViewTriggers","listenTo","_childViewEventHandler","childViewEvents","childViewTriggers","childEventName","Region","_initEl","getEl","_ensureElement","_getView","currentView","_isSwappingView","empty","_setupChildView","_renderView","_attachView","_proxyChildViewEvents","_empty","parentView","_parentView","supportsRenderLifecycle","render","shouldReplaceEl","replaceElement","_replaceEl","attachHtml","allowMissingEl","viewOptions","_getViewOptions","_restoreEl","replaceEl","_isReplaced","appendChildren","detachHtml","shouldDestroy","preventDestroy","off","removeView","_detachView","_stopChildViewEvents","destroy","destroyView","detachContents","reset","buildRegion","RegionsMixin","regions","_regions","addRegions","isEmpty","_addRegions","regionDefinitions","partial","_addRegion","region","_removeRegion","getRegions","bind","getRegion","clone","show","detachView","Renderer","data","templateFunc","get","_initBehaviors","_initRegions","constructor","delegateEntityEvents","serializeModel","serializeCollection","attributes","hasEl","setElement","bindUIElements","_reInitRegions","_renderTemplate","getTemplate","mixinTemplateContext","serializeData","attachElContent","templateContext","setInnerContent","removeRegions","compact","emulateCollection","object","listProperty","list","values","toArray","Container","views","_views","_indexByModel","_indexByCustom","_updateLength","add","customIndex","_add","viewCid","findByModelCid","modelCid","findByCid","index","_remove","some","size","CollectionView","once","_initialEvents","_initChildViewStorage","_bufferedChildren","_isBuffering","triggerOnChildren","attachBuffer","_createBuffer","_onCollectionAdd","_onCollectionUpdate","sort","_sortViews","at","indexOf","filter","_filteredSortedModels","_shouldAddChild","_destroyEmptyView","_addChild","changes","_removeChildModels","removed","models","removedViews","_getRemovedViews","_updateIndices","_showEmptyView","removingViews","findByModel","_removeChildView","push","_renderChildren","preventRender","_ref","canBeRendered","filterChanged","shouldRender","previousModels","_applyModelDeltas","setFilter","currentIds","addedChildNotExists","removeModels","prevModel","_showingEmptyView","anyModelsAdded","filteredOutModels","elsToReorder","viewEls","_index","_appendReorderedChildren","reorderOnSort","reorder","orderChanged","find","item","_this3","resortView","_destroyChildren","processedModels","_startBuffering","_showCollection","_endBuffering","ChildView","_getChildView","childViewOptions","_getChildViewOptions","buildChildView","addedAt","viewComparator","getViewComparator","Math","min","max","addedModel","_sortModelsBy","splice","_filterModels","_this4","comparator","sortBy","EmptyView","_getEmptyView","emptyViewOptions","_emptyViewIndex","addChildView","emptyView","childView","_createView","increment","laterView","ChildViewClass","collectionView","buffer","elBuffer","createBuffer","b","_insertBefore","_insertAfter","findPosition","beforeEl","ChildViewContainer","CompositeView","renderChildren","_isRendering","resetChildViewContainer","compositeView","$container","getChildViewContainer","containerView","$childViewContainer","container","childViewContainer","charAt","substr","MixinFromView","Behavior","behaviorEvents","behaviorHandler","behaviorTriggers","Application","_initRegion","_region","AppRouter","Router","appRoutes","controller","_getController","processAppRoutes","_processOnRoute","route","_addAppRoute","routeName","routeArgs","onRoute","routePath","invert","routeNames","reverse","previousMarionette","noConflict","Object","VERSION"],"mappings":"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","file":"backbone.marionette.min.js","sourcesContent":["// Trigger Method\n// --------------\n\nimport _ from 'underscore';\nimport getOption from './get-option';\n\n// split the event name on the \":\"\nconst splitter = /(^|:)(\\w)/gi;\n\n// take the event section (\"section1:section2:section3\")\n// and turn it in to uppercase name onSection1Section2Section3\nfunction getEventName(match, prefix, eventName) {\n  return eventName.toUpperCase();\n}\n\nconst getOnMethodName = _.memoize(function(event) {\n  return 'on' + event.replace(splitter, getEventName);\n});\n\n// Trigger an event and/or a corresponding method name. Examples:\n//\n// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n// call the \"onFoo\" method.\n//\n// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n// call the \"onFooBar\" method.\nexport function triggerMethod(event, ...args) {\n  // get the method name from the event name\n  const methodName = getOnMethodName(event);\n  const method = getOption.call(this, methodName);\n  let result;\n\n  // call the onMethodName if it exists\n  if (_.isFunction(method)) {\n    // pass all args, except the event name\n    result = method.apply(this, args);\n  }\n\n  // trigger the event\n  this.trigger.apply(this, arguments);\n\n  return result;\n}\n\n// triggerMethodOn invokes triggerMethod on a specific context\n//\n// e.g. `Marionette.triggerMethodOn(view, 'show')`\n// will trigger a \"show\" event or invoke onShow the view.\nexport function triggerMethodOn(context, ...args) {\n  if (_.isFunction(context.triggerMethod)) {\n    return context.triggerMethod.apply(context, args);\n  }\n\n  return triggerMethod.apply(context, args);\n}\n","// DOM Refresh\n// -----------\n\nimport _ from 'underscore';\nimport { triggerMethodOn } from './trigger-method';\n\n// Trigger method on children unless a pure Backbone.View\nfunction triggerMethodChildren(view, event, shouldTrigger) {\n  if (!view._getImmediateChildren) { return; }\n  _.each(view._getImmediateChildren(), child => {\n    if (!shouldTrigger(child)) { return; }\n    triggerMethodOn(child, event, child);\n  });\n}\n\nfunction shouldTriggerAttach(view) {\n  return !view._isAttached;\n}\n\nfunction shouldAttach(view) {\n  if (!shouldTriggerAttach(view)) { return false; }\n  view._isAttached = true;\n  return true;\n}\n\nfunction shouldTriggerDetach(view) {\n  return view._isAttached;\n}\n\nfunction shouldDetach(view) {\n  if (!shouldTriggerDetach(view)) { return false; }\n  view._isAttached = false;\n  return true;\n}\n\nfunction triggerDOMRefresh(view) {\n  if (view._isAttached && view._isRendered) {\n    triggerMethodOn(view, 'dom:refresh', view);\n  }\n}\n\nfunction handleBeforeAttach() {\n  triggerMethodChildren(this, 'before:attach', shouldTriggerAttach);\n}\n\nfunction handleAttach() {\n  triggerMethodChildren(this, 'attach', shouldAttach);\n  triggerDOMRefresh(this);\n}\n\nfunction handleBeforeDetach() {\n  triggerMethodChildren(this, 'before:detach', shouldTriggerDetach);\n}\n\nfunction handleDetach() {\n  triggerMethodChildren(this, 'detach', shouldDetach);\n}\n\nfunction handleRender() {\n  triggerDOMRefresh(this);\n}\n\n// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n// whenever a rendered view is attached or an attached view is rendered.\nfunction monitorViewEvents(view) {\n  if (view._areViewEventsMonitored) { return; }\n\n  view._areViewEventsMonitored = true;\n\n  view.on({\n    'before:attach': handleBeforeAttach,\n    'attach': handleAttach,\n    'before:detach': handleBeforeDetach,\n    'detach': handleDetach,\n    'render': handleRender\n  });\n}\n\nexport default monitorViewEvents;\n","// Bind Entity Events & Unbind Entity Events\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone \"entity\" (e.g. collection/model)\n// to methods on a target object.\n//\n// The first parameter, `target`, must have the Backbone.Events module mixed in.\n//\n// The second parameter is the `entity` (Backbone.Model, Backbone.Collection or\n// any object that has Backbone.Events mixed in) to bind the events from.\n//\n// The third parameter is a hash of { \"event:name\": \"eventHandler\" }\n// configuration. Multiple handlers can be separated by a space. A\n// function can be supplied instead of a string handler name.\n\nimport _ from 'underscore';\nimport MarionetteError from '../error';\n\n// Bind/unbind the event to handlers specified as a string of\n// handler names on the target object\nfunction bindFromStrings(target, entity, evt, methods, actionName) {\n  const methodNames = methods.split(/\\s+/);\n\n  _.each(methodNames, function(methodName) {\n    const method = target[methodName];\n    if (!method) {\n      throw new MarionetteError(`Method \"${methodName}\" was configured as an event handler, but does not exist.`);\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\n// generic looping function\nfunction iterateEvents(target, entity, bindings, actionName) {\n  if (!entity || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindevents'\n    });\n  }\n\n  // iterate the bindings and bind/unbind them\n  _.each(bindings, function(method, evt) {\n\n    // allow for a list of method names as a string\n    if (_.isString(method)) {\n      bindFromStrings(target, entity, evt, method, actionName);\n      return;\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\nfunction bindEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'listenTo');\n  return this;\n}\n\nfunction unbindEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'stopListening');\n  return this;\n}\n\n// Export Public API\nexport {\n  bindEvents,\n  unbindEvents\n};\n","// Bind/Unbind Radio Requests\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone.radio request\n// to methods on a target object.\n//\n// The first parameter, `target`, will set the context of the reply method\n//\n// The second parameter is the `Radio.channel` to bind the reply to.\n//\n// The third parameter is a hash of { \"request:name\": \"replyHandler\" }\n// configuration. A function can be supplied instead of a string handler name.\n\nimport _ from 'underscore';\nimport normalizeMethods from './normalize-methods';\nimport MarionetteError from '../error';\n\nfunction iterateReplies(target, channel, bindings, actionName) {\n  if (!channel || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindrequests'\n    });\n  }\n\n  const normalizedRadioRequests = normalizeMethods.call(target, bindings);\n\n  channel[actionName](normalizedRadioRequests, target);\n}\n\nfunction bindRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'reply');\n  return this;\n}\n\nfunction unbindRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'stopReplying');\n  return this;\n}\n\nexport {\n  bindRequests,\n  unbindRequests\n};\n","import _ from 'underscore';\nimport _invoke from '../utils/invoke';\nimport { triggerMethod } from '../common/trigger-method';\nimport Marionette from '../backbone.marionette';\n\n// MixinOptions\n// - behaviors\n\n// Takes care of getting the behavior class\n// given options and a key.\n// If a user passes in options.behaviorClass\n// default to using that.\n// If a user passes in a Behavior Class directly, use that\n// Otherwise delegate the lookup to the users `behaviorsLookup` implementation.\nfunction getBehaviorClass(options, key) {\n  if (options.behaviorClass) {\n    return options.behaviorClass;\n    //treat functions as a Behavior constructor\n  } else if (_.isFunction(options)) {\n    return options;\n  }\n\n  // behaviorsLookup can be either a flat object or a method\n  if (_.isFunction(Marionette.Behaviors.behaviorsLookup)) {\n    return Marionette.Behaviors.behaviorsLookup(options, key)[key];\n  }\n\n  return Marionette.Behaviors.behaviorsLookup[key];\n}\n\n// Iterate over the behaviors object, for each behavior\n// instantiate it and get its grouped behaviors.\n// This accepts a list of behaviors in either an object or array form\nfunction parseBehaviors(view, behaviors) {\n  return _.chain(behaviors).map(function(options, key) {\n    const BehaviorClass = getBehaviorClass(options, key);\n    //if we're passed a class directly instead of an object\n    const _options = options === BehaviorClass ? {} : options;\n    const behavior = new BehaviorClass(_options, view);\n    const nestedBehaviors = parseBehaviors(view, _.result(behavior, 'behaviors'));\n\n    return [behavior].concat(nestedBehaviors);\n  }).flatten().value();\n}\n\nexport default {\n  _initBehaviors() {\n    this._behaviors = this._getBehaviors();\n  },\n\n  _getBehaviors() {\n    const behaviors = _.result(this, 'behaviors');\n\n    // Behaviors defined on a view can be a flat object literal\n    // or it can be a function that returns an object.\n    return _.isObject(behaviors) ? parseBehaviors(this, behaviors) : {};\n  },\n\n  _getBehaviorTriggers() {\n    const triggers = _invoke(this._behaviors, 'getTriggers');\n    return _.extend({}, ...triggers);\n  },\n\n  _getBehaviorEvents() {\n    const events = _invoke(this._behaviors, 'getEvents');\n    return _.extend({}, ...events);\n  },\n\n  // proxy behavior $el to the view's $el.\n  _proxyBehaviorViewProperties() {\n    _invoke(this._behaviors, 'proxyViewProperties');\n  },\n\n  // delegate modelEvents and collectionEvents\n  _delegateBehaviorEntityEvents() {\n    _invoke(this._behaviors, 'delegateEntityEvents');\n  },\n\n  // undelegate modelEvents and collectionEvents\n  _undelegateBehaviorEntityEvents() {\n    _invoke(this._behaviors, 'undelegateEntityEvents');\n  },\n\n  _destroyBehaviors(args) {\n    // Call destroy on each behavior after\n    // destroying the view.\n    // This unbinds event listeners\n    // that behaviors have registered for.\n    _invoke(this._behaviors, 'destroy', ...args);\n  },\n\n  _bindBehaviorUIElements() {\n    _invoke(this._behaviors, 'bindUIElements');\n  },\n\n  _unbindBehaviorUIElements() {\n    _invoke(this._behaviors, 'unbindUIElements');\n  },\n\n  _triggerEventOnBehaviors() {\n    const behaviors = this._behaviors;\n    // Use good ol' for as this is a very hot function\n    for (let i = 0, length = behaviors && behaviors.length; i < length; i++) {\n      triggerMethod.apply(behaviors[i], arguments);\n    }\n  }\n};\n","import _ from 'underscore';\n\n// Borrow event splitter from Backbone\nconst delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nfunction uniqueName(eventName, selector) {\n  return [eventName + _.uniqueId('.evt'), selector].join(' ');\n}\n\n// Set event name to be namespaced using a unique index\n// to generate a non colliding event namespace\n// http://api.jquery.com/event.namespace/\nconst getUniqueEventName = function(eventName) {\n  const match = eventName.match(delegateEventSplitter);\n  return uniqueName(match[1], match[2]);\n};\n\nexport default getUniqueEventName;\n","// Add Feature flags here\n// e.g. 'class' => false\nconst FEATURES = {\n  triggersStopPropagation: true,\n  triggersPreventDefault: true\n};\n\nfunction isEnabled(name) {\n  return !!FEATURES[name];\n}\n\nfunction setEnabled(name, state) {\n  return FEATURES[name] = state;\n}\n\nexport {\n  FEATURES,\n  setEnabled,\n  isEnabled\n};\n","import _ from 'underscore';\nimport getUniqueEventName from '../utils/get-unique-event-name';\nimport { isEnabled } from '../config/features';\n\n// Internal method to create an event handler for a given `triggerDef` like\n// 'click:foo'\nfunction buildViewTrigger(view, triggerDef) {\n  if (_.isString(triggerDef)) {\n    triggerDef = {event: triggerDef};\n  }\n\n  const eventName = triggerDef.event;\n\n  let shouldPreventDefault = !!triggerDef.preventDefault;\n\n  if (isEnabled('triggersPreventDefault')) {\n    shouldPreventDefault = triggerDef.preventDefault !== false;\n  }\n\n  let shouldStopPropagation = !!triggerDef.stopPropagation;\n\n  if (isEnabled('triggersStopPropagation')) {\n    shouldStopPropagation = triggerDef.stopPropagation !== false;\n  }\n\n  return function(event) {\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n\n    if (shouldStopPropagation) {\n      event.stopPropagation();\n    }\n\n    view.triggerMethod(eventName, view, event);\n  };\n}\n\nexport default {\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  _getViewTriggers(view, triggers) {\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return _.reduce(triggers, (events, value, key) => {\n      key = getUniqueEventName(key);\n      events[key] = buildViewTrigger(view, value);\n      return events;\n    }, {});\n  }\n\n};\n","import { triggerMethodOn } from '../common/trigger-method';\n\nexport default function destroyBackboneView(view) {\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'before:destroy', view);\n  }\n\n  const shouldTriggerDetach = !!view._isAttached;\n\n  if (shouldTriggerDetach) {\n    triggerMethodOn(view, 'before:detach', view);\n  }\n\n  view.remove();\n\n  if (shouldTriggerDetach) {\n    view._isAttached = false;\n    triggerMethodOn(view, 'detach', view);\n  }\n\n  view._isDestroyed = true;\n\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'destroy', view);\n  }\n}\n","import _ from 'underscore';\nimport deprecate from '../utils/deprecate';\nimport MarionetteError from '../error';\nimport Region from '../region';\n\n// return the region instance from the definition\nexport default function(definition, defaults) {\n  if (definition instanceof Region) {\n    return definition;\n  }\n\n  return buildRegionFromDefinition(definition, defaults);\n}\n\nfunction buildRegionFromDefinition(definition, defaults) {\n  const opts = _.extend({}, defaults);\n\n  if (_.isString(definition)) {\n    _.extend(opts, { el: definition });\n\n    return buildRegionFromObject(opts);\n  }\n\n  if (_.isFunction(definition)) {\n    _.extend(opts, { regionClass: definition });\n\n    return buildRegionFromObject(opts);\n  }\n\n  if (_.isObject(definition)) {\n    if (definition.selector) {\n      deprecate('The selector option on a Region definition object is deprecated. Use el to pass a selector string');\n    }\n\n    _.extend(opts, { el: definition.selector }, definition);\n\n    return buildRegionFromObject(opts);\n  }\n\n  throw new MarionetteError({\n    message: 'Improper region configuration type.',\n    url: 'marionette.region.html#region-configuration-types'\n  });\n}\n\nfunction buildRegionFromObject(definition) {\n  const RegionClass = definition.regionClass;\n\n  const options = _.omit(definition, 'regionClass');\n\n  const fields = definition.fields;\n\n  if (fields) {\n    options.model = _.pick(this.getModel(), fields);\n  }\n\n  return new RegionClass(options);\n}\n","import MarionetteError from '../error';\n\n// Placeholder method to be extended by the user.\n// The method should define the object that stores the behaviors.\n// i.e.\n//\n// ```js\n// Marionette.Behaviors.behaviorsLookup: function() {\n//   return App.Behaviors\n// }\n// ```\nexport default function behaviorsLookup() {\n  throw new MarionetteError({\n    message: 'You must define where your behaviors are stored.',\n    url: 'marionette.behaviors.md#behaviorslookup'\n  });\n}\n","//Internal utility for creating context style global utils\nconst proxy = function(method) {\n  return function(context, ...args) {\n    return method.apply(context, args);\n  };\n};\n\nexport default proxy;\n","// Marionette.extend\n// -----------------\n\nimport Backbone from 'backbone';\n\n// Borrow the Backbone `extend` method so we can use it as needed\nconst extend = Backbone.Model.extend;\n\nexport default extend;\n","/* global console */\n\nimport _ from 'underscore';\n\nimport Marionette from '../backbone.marionette';\n\nconst deprecate = function(message, test) {\n  if (_.isObject(message)) {\n    message = (\n      message.prev + ' is going to be removed in the future. ' +\n      'Please use ' + message.next + ' instead.' +\n      (message.url ? ' See: ' + message.url : '')\n    );\n  }\n\n  if (!Marionette.DEV_MODE) {\n    return;\n  }\n\n  if ((test === undefined || !test) && !deprecate._cache[message]) {\n    deprecate._warn('Deprecation warning: ' + message);\n    deprecate._cache[message] = true;\n  }\n};\n\ndeprecate._console = typeof console !== 'undefined' ? console : {};\ndeprecate._warn = function() {\n  const warn = deprecate._console.warn || deprecate._console.log || _.noop;\n  return warn.apply(deprecate._console, arguments);\n};\ndeprecate._cache = {};\n\nexport default deprecate;\n","// Marionette.isNodeAttached\n// -------------------------\n\n// Determine if `el` is a child of the document\nconst isNodeAttached = function(el) {\n  return document.documentElement.contains(el && el.parentNode);\n};\n\nexport default isNodeAttached;\n","import _ from 'underscore';\n\n// Merge `keys` from `options` onto `this`\nconst mergeOptions = function(options, keys) {\n  if (!options) { return; }\n\n  _.each(keys, (key) => {\n    const option = options[key];\n    if (option !== undefined) {\n      this[key] = option;\n    }\n  });\n};\n\nexport default mergeOptions;\n","// Marionette.getOption\n// --------------------\n\n// Retrieve an object, function or other value from the\n// object or its `options`, with `options` taking precedence.\nconst getOption = function(optionName) {\n  if (!optionName) { return; }\n  if (this.options && (this.options[optionName] !== undefined)) {\n    return this.options[optionName];\n  } else {\n    return this[optionName];\n  }\n};\n\nexport default getOption;\n","import _ from 'underscore';\n\n// Marionette.normalizeMethods\n// ----------------------\n\n// Pass in a mapping of events => functions or function names\n// and return a mapping of events => functions\nconst normalizeMethods = function(hash) {\n  return _.reduce(hash, (normalizedHash, method, name) => {\n    if (!_.isFunction(method)) {\n      method = this[method];\n    }\n    if (method) {\n      normalizedHash[name] = method;\n    }\n    return normalizedHash;\n  }, {});\n};\n\nexport default normalizeMethods;\n","// Error\n// -----\n\nimport _ from 'underscore';\nimport extend from './utils/extend';\nimport {version} from '../package.json';\n\nconst errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n\nconst MarionetteError = extend.call(Error, {\n  urlRoot: `http://marionettejs.com/docs/v${version}/`,\n\n  constructor(message, options) {\n    if (_.isObject(message)) {\n      options = message;\n      message = options.message;\n    } else if (!options) {\n      options = {};\n    }\n\n    const error = Error.call(this, message);\n    _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n\n    this.captureStackTrace();\n\n    if (options.url) {\n      this.url = this.urlRoot + options.url;\n    }\n  },\n\n  captureStackTrace() {\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, MarionetteError);\n    }\n  },\n\n  toString() {\n    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n  }\n});\n\nMarionetteError.extend = extend;\n\nexport default MarionetteError;\n","import _ from 'underscore';\n\n// Internal utility for setting options consistently across Mn\nconst setOptions = function(...args) {\n  this.options = _.extend({}, _.result(this, 'options'), ...args);\n};\n\nexport default setOptions;\n","import _setOptions from '../utils/set-options';\nimport getOption from '../common/get-option';\nimport mergeOptions from '../common/merge-options';\nimport normalizeMethods from '../common/normalize-methods';\nimport {\n  bindEvents,\n  unbindEvents\n} from '../common/bind-events';\n\nexport default {\n\n  // Imports the \"normalizeMethods\" to transform hashes of\n  // events=>function references/names to a hash of events=>function references\n  normalizeMethods: normalizeMethods,\n\n  _setOptions: _setOptions,\n\n  // A handy way to merge passed-in options onto the instance\n  mergeOptions: mergeOptions,\n\n  // Enable getting options from this or this.options by name.\n  getOption: getOption,\n\n  // Enable binding view's events from another entity.\n  bindEvents: bindEvents,\n\n  // Enable unbinding view's events from another entity.\n  unbindEvents: unbindEvents\n};\n","import _ from 'underscore';\nimport Radio from 'backbone.radio';\n\nimport {\n  bindRequests,\n  unbindRequests\n} from '../common/bind-requests';\n\nimport {\n  bindEvents,\n  unbindEvents\n} from '../common/bind-events';\n\nimport MarionetteError from '../error';\n\n// MixinOptions\n// - channelName\n// - radioEvents\n// - radioRequests\n\nexport default {\n\n  _initRadio() {\n    const channelName = _.result(this, 'channelName');\n\n    if (!channelName) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!Radio) {\n      throw new MarionetteError({\n        name: 'BackboneRadioMissing',\n        message: 'The dependency \"backbone.radio\" is missing.'\n      });\n    }\n\n    const channel = this._channel = Radio.channel(channelName);\n\n    const radioEvents = _.result(this, 'radioEvents');\n    this.bindEvents(channel, radioEvents);\n\n    const radioRequests = _.result(this, 'radioRequests');\n    this.bindRequests(channel, radioRequests);\n\n    this.on('destroy', this._destroyRadio);\n  },\n\n  _destroyRadio() {\n    this._channel.stopReplying(null, null, this);\n  },\n\n  getChannel() {\n    return this._channel;\n  },\n\n  // Proxy `bindEvents`\n  bindEvents: bindEvents,\n\n  // Proxy `unbindEvents`\n  unbindEvents: unbindEvents,\n\n  // Proxy `bindRequests`\n  bindRequests: bindRequests,\n\n  // Proxy `unbindRequests`\n  unbindRequests: unbindRequests\n\n};\n","// Object\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport extend from './utils/extend';\nimport { triggerMethod } from './common/trigger-method';\nimport CommonMixin from './mixins/common';\nimport RadioMixin from './mixins/radio';\n\nconst ClassOptions = [\n  'channelName',\n  'radioEvents',\n  'radioRequests'\n];\n\n// A Base Class that other Classes should descend from.\n// Object borrows many conventions and utilities from Backbone.\nconst MarionetteObject = function(options) {\n  this._setOptions(options);\n  this.mergeOptions(options, ClassOptions);\n  this.cid = _.uniqueId(this.cidPrefix);\n  this._initRadio();\n  this.initialize.apply(this, arguments);\n};\n\nMarionetteObject.extend = extend;\n\n// Object Methods\n// --------------\n\n// Ensure it can trigger events with Backbone.Events\n_.extend(MarionetteObject.prototype, Backbone.Events, CommonMixin, RadioMixin, {\n  cidPrefix: 'mno',\n\n  // for parity with Marionette.AbstractView lifecyle\n  _isDestroyed: false,\n\n  isDestroyed() {\n    return this._isDestroyed;\n  },\n\n  //this is a noop method intended to be overridden by classes that extend from this base\n  initialize() {},\n\n  destroy(...args) {\n    if (this._isDestroyed) { return this; }\n\n    this.triggerMethod('before:destroy', this, ...args);\n\n    this._isDestroyed = true;\n    this.triggerMethod('destroy', this, ...args);\n    this.stopListening();\n\n    return this;\n  },\n\n  triggerMethod: triggerMethod\n});\n\nexport default MarionetteObject;\n","// DomMixin\n//  ---------\n\nimport Backbone from 'backbone';\n\nexport default {\n  createBuffer() {\n    return document.createDocumentFragment();\n  },\n\n  appendChildren(el, children) {\n    Backbone.$(el).append(children);\n  },\n\n  beforeEl(el, sibling) {\n    Backbone.$(el).before(sibling);\n  },\n\n  replaceEl(newEl, oldEl) {\n    if (newEl === oldEl) {\n      return;\n    }\n\n    const parent = oldEl.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    parent.replaceChild(newEl, oldEl);\n  },\n\n  detachContents(el) {\n    Backbone.$(el).contents().detach();\n  },\n\n  setInnerContent(el, html) {\n    Backbone.$(el).html(html);\n  },\n\n  removeEl(el) {\n    Backbone.$(el).remove();\n  },\n\n  findEls(selector, context) {\n    return Backbone.$(selector, context);\n  }\n};\n","// Template Cache\n// --------------\n\nimport _ from 'underscore';\nimport DomMixin from './mixins/dom';\nimport MarionetteError from './error';\n\n// Manage templates stored in `<script>` blocks,\n// caching them for faster access.\nconst TemplateCache = function(templateId) {\n  this.templateId = templateId;\n};\n\n// TemplateCache object-level methods. Manage the template\n// caches from these method calls instead of creating\n// your own TemplateCache instances\n_.extend(TemplateCache, {\n  templateCaches: {},\n\n  // Get the specified template by id. Either\n  // retrieves the cached version, or loads it\n  // from the DOM.\n  get(templateId, options) {\n    let cachedTemplate = this.templateCaches[templateId];\n\n    if (!cachedTemplate) {\n      cachedTemplate = new TemplateCache(templateId);\n      this.templateCaches[templateId] = cachedTemplate;\n    }\n\n    return cachedTemplate.load(options);\n  },\n\n  // Clear templates from the cache. If no arguments\n  // are specified, clears all templates:\n  // `clear()`\n  //\n  // If arguments are specified, clears each of the\n  // specified templates from the cache:\n  // `clear(\"#t1\", \"#t2\", \"...\")`\n  clear(...args) {\n    let i;\n    const length = args.length;\n\n    if (length > 0) {\n      for (i = 0; i < length; i++) {\n        delete this.templateCaches[args[i]];\n      }\n    } else {\n      this.templateCaches = {};\n    }\n  }\n});\n\n// TemplateCache instance methods, allowing each\n// template cache object to manage its own state\n// and know whether or not it has been loaded\n_.extend(TemplateCache.prototype, DomMixin, {\n\n  // Internal method to load the template\n  load(options) {\n    // Guard clause to prevent loading this template more than once\n    if (this.compiledTemplate) {\n      return this.compiledTemplate;\n    }\n\n    // Load the template and compile it\n    const template = this.loadTemplate(this.templateId, options);\n    this.compiledTemplate = this.compileTemplate(template, options);\n\n    return this.compiledTemplate;\n  },\n\n  // Load a template from the DOM, by default. Override\n  // this method to provide your own template retrieval\n  // For asynchronous loading with AMD/RequireJS, consider\n  // using a template-loader plugin as described here:\n  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n  loadTemplate(templateId, options) {\n    const $template = this.findEls(templateId);\n\n    if (!$template.length) {\n      throw new MarionetteError({\n        name: 'NoTemplateError',\n        message: `Could not find template: \"${templateId}\"`\n      });\n    }\n    return $template.html();\n  },\n\n  // Pre-compile the template before caching it. Override\n  // this method if you do not need to pre-compile a template\n  // (JST / RequireJS for example) or if you want to change\n  // the template engine used (Handebars, etc).\n  compileTemplate(rawTemplate, options) {\n    return _.template(rawTemplate, options);\n  }\n});\n\nexport default TemplateCache;\n","// Implementation of the invoke method (http://underscorejs.org/#invoke) with support for\n// lodash v3, v4, and underscore.js\nimport _ from 'underscore';\n\nexport default _.invokeMap || _.invoke;\n","import _ from 'underscore';\n\nimport {\n  bindEvents,\n  unbindEvents\n} from '../common/bind-events';\n\n// MixinOptions\n// - collectionEvents\n// - modelEvents\n\nexport default {\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  _delegateEntityEvents(model, collection) {\n    this._undelegateEntityEvents(model, collection);\n\n    const modelEvents = _.result(this, 'modelEvents');\n    bindEvents.call(this, model, modelEvents);\n\n    const collectionEvents = _.result(this, 'collectionEvents');\n    bindEvents.call(this, collection, collectionEvents);\n  },\n\n  _undelegateEntityEvents(model, collection) {\n    const modelEvents = _.result(this, 'modelEvents');\n    unbindEvents.call(this, model, modelEvents);\n\n    const collectionEvents = _.result(this, 'collectionEvents');\n    unbindEvents.call(this, collection, collectionEvents);\n  }\n};\n","import _ from 'underscore';\n// allows for the use of the @ui. syntax within\n// a given key for triggers and events\n// swaps the @ui with the associated selector.\n// Returns a new, non-mutated, parsed events hash.\nconst normalizeUIKeys = function(hash, ui) {\n  return _.reduce(hash, (memo, val, key) => {\n    const normalizedKey = normalizeUIString(key, ui);\n    memo[normalizedKey] = val;\n    return memo;\n  }, {});\n};\n\n// utility method for parsing @ui. syntax strings\n// into associated selector\nconst normalizeUIString = function(uiString, ui) {\n  return uiString.replace(/@ui\\.[a-zA-Z-_$0-9]*/g, (r) => {\n    return ui[r.slice(4)];\n  });\n};\n\n// allows for the use of the @ui. syntax within\n// a given value for regions\n// swaps the @ui with the associated selector\nconst normalizeUIValues = function(hash, ui, properties) {\n  _.each(hash, (val, key) => {\n    if (_.isString(val)) {\n      hash[key] = normalizeUIString(val, ui);\n    } else if (_.isObject(val) && _.isArray(properties)) {\n      _.extend(val, normalizeUIValues(_.pick(val, properties), ui));\n      /* Value is an object, and we got an array of embedded property names to normalize. */\n      _.each(properties, (property) => {\n        const propertyVal = val[property];\n        if (_.isString(propertyVal)) {\n          val[property] = normalizeUIString(propertyVal, ui);\n        }\n      });\n    }\n  });\n  return hash;\n};\n\nexport default {\n\n  // normalize the keys of passed hash with the views `ui` selectors.\n  // `{\"@ui.foo\": \"bar\"}`\n  normalizeUIKeys(hash) {\n    const uiBindings = this._getUIBindings();\n    return normalizeUIKeys(hash, uiBindings);\n  },\n\n  // normalize the passed string with the views `ui` selectors.\n  // `\"@ui.bar\"`\n  normalizeUIString(uiString) {\n    const uiBindings = this._getUIBindings();\n    return normalizeUIString(uiString, uiBindings);\n  },\n\n  // normalize the values of passed hash with the views `ui` selectors.\n  // `{foo: \"@ui.bar\"}`\n  normalizeUIValues(hash, properties) {\n    const uiBindings = this._getUIBindings();\n    return normalizeUIValues(hash, uiBindings, properties);\n  },\n\n  _getUIBindings() {\n    const uiBindings = _.result(this, '_uiBindings');\n    const ui = _.result(this, 'ui');\n    return uiBindings || ui;\n  },\n\n  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n  // the associated jQuery selectors.\n  _bindUIElements() {\n    if (!this.ui) { return; }\n\n    // store the ui hash in _uiBindings so they can be reset later\n    // and so re-rendering the view will be able to find the bindings\n    if (!this._uiBindings) {\n      this._uiBindings = this.ui;\n    }\n\n    // get the bindings result, as a function or otherwise\n    const bindings = _.result(this, '_uiBindings');\n\n    // empty the ui so we don't have anything to start with\n    this._ui = {};\n\n    // bind each of the selectors\n    _.each(bindings, (selector, key) => {\n      this._ui[key] = this.$(selector);\n    });\n\n    this.ui = this._ui;\n  },\n\n  _unbindUIElements() {\n    if (!this.ui || !this._uiBindings) { return; }\n\n    // delete all of the existing ui bindings\n    _.each(this.ui, ($el, name) => {\n      delete this.ui[name];\n    });\n\n    // reset the ui element to the original bindings configuration\n    this.ui = this._uiBindings;\n    delete this._uiBindings;\n    delete this._ui;\n  },\n\n  _getUI(name) {\n    return this._ui[name];\n  }\n};\n","// ViewMixin\n//  ---------\n\nimport Backbone from 'backbone';\nimport _ from 'underscore';\nimport { triggerMethod } from '../common/trigger-method';\nimport BehaviorsMixin from './behaviors';\nimport CommonMixin from './common';\nimport DelegateEntityEventsMixin from './delegate-entity-events';\nimport DomMixin from './dom';\nimport TriggersMixin from './triggers';\nimport UIMixin from './ui';\n\n// MixinOptions\n// - behaviors\n// - childViewEventPrefix\n// - childViewEvents\n// - childViewTriggers\n// - collectionEvents\n// - modelEvents\n// - triggers\n// - ui\n\n\nconst ViewMixin = {\n  supportsRenderLifecycle: true,\n  supportsDestroyLifecycle: true,\n\n  _isDestroyed: false,\n\n  isDestroyed() {\n    return !!this._isDestroyed;\n  },\n\n  _isRendered: false,\n\n  isRendered() {\n    return !!this._isRendered;\n  },\n\n  _isAttached: false,\n\n  isAttached() {\n    return !!this._isAttached;\n  },\n\n  // Overriding Backbone.View's `delegateEvents` to handle\n  // `events` and `triggers`\n  delegateEvents(eventsArg) {\n\n    this._proxyBehaviorViewProperties();\n    this._buildEventProxies();\n\n    const viewEvents = this._getEvents(eventsArg);\n\n    if (typeof eventsArg === 'undefined') {\n      this.events = viewEvents;\n    }\n\n    const combinedEvents = _.extend({},\n      this._getBehaviorEvents(),\n      viewEvents,\n      this._getBehaviorTriggers(),\n      this.getTriggers()\n    );\n\n    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n\n    return this;\n  },\n\n  _getEvents(eventsArg) {\n    const events = eventsArg || this.events;\n\n    if (_.isFunction(events)) {\n      return this.normalizeUIKeys(events.call(this));\n    }\n\n    return this.normalizeUIKeys(events);\n  },\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  getTriggers() {\n    if (!this.triggers) { return; }\n\n    // Allow `triggers` to be configured as a function\n    const triggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return this._getViewTriggers(this, triggers);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents() {\n    this._delegateEntityEvents(this.model, this.collection);\n\n    // bind each behaviors model and collection events\n    this._delegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n  undelegateEntityEvents() {\n    this._undelegateEntityEvents(this.model, this.collection);\n\n    // unbind each behaviors model and collection events\n    this._undelegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Handle destroying the view and its children.\n  destroy(...args) {\n    if (this._isDestroyed) { return this; }\n    const shouldTriggerDetach = !!this._isAttached;\n\n    this.triggerMethod('before:destroy', this, ...args);\n    if (shouldTriggerDetach) {\n      this.triggerMethod('before:detach', this);\n    }\n\n    // unbind UI elements\n    this.unbindUIElements();\n\n    // remove the view from the DOM\n    this.removeEl(this.el);\n\n    if (shouldTriggerDetach) {\n      this._isAttached = false;\n      this.triggerMethod('detach', this);\n    }\n\n    // remove children after the remove to prevent extra paints\n    this._removeChildren();\n\n    this._destroyBehaviors(args);\n\n    this._isDestroyed = true;\n    this._isRendered = false;\n    this.triggerMethod('destroy', this, ...args);\n\n    this.stopListening();\n\n    return this;\n  },\n\n  bindUIElements() {\n    this._bindUIElements();\n    this._bindBehaviorUIElements();\n\n    return this;\n  },\n\n  // This method unbinds the elements specified in the \"ui\" hash\n  unbindUIElements() {\n    this._unbindUIElements();\n    this._unbindBehaviorUIElements();\n\n    return this;\n  },\n\n  getUI(name) {\n    return this._getUI(name);\n  },\n\n  // used as the prefix for child view events\n  // that are forwarded through the layoutview\n  childViewEventPrefix: 'childview',\n\n  // import the `triggerMethod` to trigger events with corresponding\n  // methods if the method exists\n  triggerMethod() {\n    const ret = triggerMethod.apply(this, arguments);\n\n    this._triggerEventOnBehaviors.apply(this, arguments);\n\n    return ret;\n  },\n\n  // Cache `childViewEvents` and `childViewTriggers`\n  _buildEventProxies() {\n    this._childViewEvents = _.result(this, 'childViewEvents');\n    this._childViewTriggers = _.result(this, 'childViewTriggers');\n  },\n\n  _proxyChildViewEvents(view) {\n    this.listenTo(view, 'all', this._childViewEventHandler);\n  },\n\n  _childViewEventHandler(eventName, ...args) {\n    const childViewEvents = this.normalizeMethods(this._childViewEvents);\n\n    // call collectionView childViewEvent if defined\n    if (typeof childViewEvents !== 'undefined' && _.isFunction(childViewEvents[eventName])) {\n      childViewEvents[eventName].apply(this, args);\n    }\n\n    // use the parent view's proxyEvent handlers\n    const childViewTriggers = this._childViewTriggers;\n\n    // Call the event with the proxy name on the parent layout\n    if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n      this.triggerMethod(childViewTriggers[eventName], ...args);\n    }\n\n    const prefix = _.result(this, 'childViewEventPrefix');\n\n    if (prefix !== false) {\n      const childEventName = prefix + ':' + eventName;\n\n      this.triggerMethod(childEventName, ...args);\n    }\n  }\n};\n\n_.extend(ViewMixin, DomMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\nexport default ViewMixin;\n","// Region\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport deprecate from './utils/deprecate';\nimport destroyBackboneView from './utils/destroy-backbone-view';\nimport monitorViewEvents from './common/monitor-view-events';\nimport isNodeAttached from './common/is-node-attached';\nimport { triggerMethodOn } from './common/trigger-method';\nimport DomMixin from './mixins/dom';\nimport MarionetteObject from './object';\nimport MarionetteError from './error';\nimport View from './view';\n\nconst ClassOptions = [\n  'allowMissingEl',\n  'parentEl',\n  'replaceElement'\n];\n\nconst Region = MarionetteObject.extend({\n  cidPrefix: 'mnr',\n  replaceElement: false,\n  _isReplaced: false,\n  _isSwappingView: false,\n\n  constructor(options) {\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    // getOption necessary because options.el may be passed as undefined\n    this._initEl = this.el = this.getOption('el');\n\n    // Handle when this.el is passed in as a $ wrapped element.\n    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n\n    if (!this.el) {\n      throw new MarionetteError({\n        name: 'NoElError',\n        message: 'An \"el\" must be specified for a region.'\n      });\n    }\n\n    this.$el = this.getEl(this.el);\n    MarionetteObject.call(this, options);\n  },\n\n  // Displays a backbone view instance inside of the region. Handles calling the `render`\n  // method for you. Reads content directly from the `el` attribute. The `preventDestroy`\n  // option can be used to prevent a view from the old view being destroyed on show.\n  show(view, options) {\n    if (!this._ensureElement(options)) {\n      return;\n    }\n\n    view = this._getView(view, options);\n\n    if (view === this.currentView) { return this; }\n\n    this._isSwappingView = !!this.currentView;\n\n    this.triggerMethod('before:show', this, view, options);\n\n    // Assume an attached view is already in the region for pre-existing DOM\n    if (!view._isAttached) {\n      this.empty(options);\n    }\n\n    this._setupChildView(view);\n\n    this._renderView(view);\n\n    this._attachView(view, options);\n\n    this.currentView = view;\n\n    this.triggerMethod('show', this, view, options);\n\n    this._isSwappingView = false;\n\n    return this;\n  },\n\n  _setupChildView(view) {\n    monitorViewEvents(view);\n\n    this._proxyChildViewEvents(view);\n\n    // We need to listen for if a view is destroyed in a way other than through the region.\n    // If this happens we need to remove the reference to the currentView since once a view\n    // has been destroyed we can not reuse it.\n    view.on('destroy', this._empty, this);\n  },\n\n  _proxyChildViewEvents(view) {\n    const parentView = this._parentView;\n\n    if (!parentView) { return; }\n\n    parentView._proxyChildViewEvents(view);\n  },\n\n  _renderView(view) {\n    if (view._isRendered) {\n      return;\n    }\n\n    if (!view.supportsRenderLifecycle) {\n      triggerMethodOn(view, 'before:render', view);\n    }\n\n    view.render();\n\n    if (!view.supportsRenderLifecycle) {\n      view._isRendered = true;\n      triggerMethodOn(view, 'render', view);\n    }\n  },\n\n  _attachView(view, options = {}) {\n    const shouldTriggerAttach = !view._isAttached && isNodeAttached(this.el);\n    const shouldReplaceEl = typeof options.replaceElement === 'undefined' ? !!_.result(this, 'replaceElement') : !!options.replaceElement;\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    if (shouldReplaceEl) {\n      this._replaceEl(view);\n    } else {\n      this.attachHtml(view);\n    }\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n  },\n\n  _ensureElement(options = {}) {\n    if (!_.isObject(this.el)) {\n      this.$el = this.getEl(this.el);\n      this.el = this.$el[0];\n    }\n\n    if (!this.$el || this.$el.length === 0) {\n      const allowMissingEl = typeof options.allowMissingEl === 'undefined' ? !!_.result(this, 'allowMissingEl') : !!options.allowMissingEl;\n\n      if (allowMissingEl) {\n        return false;\n      } else {\n        throw new MarionetteError(`An \"el\" must exist in DOM for this region ${this.cid}`);\n      }\n    }\n    return true;\n  },\n\n  _getView(view) {\n    if (!view) {\n      throw new MarionetteError({\n        name: 'ViewNotValid',\n        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\n      });\n    }\n\n    if (view._isDestroyed) {\n      throw new MarionetteError({\n        name: 'ViewDestroyedError',\n        message: `View (cid: \"${view.cid}\") has already been destroyed and cannot be used.`\n      });\n    }\n\n    if (view instanceof Backbone.View) {\n      return view;\n    }\n\n    const viewOptions = this._getViewOptions(view);\n\n    return new View(viewOptions);\n  },\n\n  // This allows for a template or a static string to be\n  // used as a template\n  _getViewOptions(viewOptions) {\n    if (_.isFunction(viewOptions)) {\n      return { template: viewOptions };\n    }\n\n    if (_.isObject(viewOptions)) {\n      return viewOptions;\n    }\n\n    const template = function() { return viewOptions; };\n\n    return { template };\n  },\n\n  // Override this method to change how the region finds the DOM element that it manages. Return\n  // a jQuery selector object scoped to a provided parent el or the document if none exists.\n  getEl(el) {\n    return this.findEls(el, _.result(this, 'parentEl'));\n  },\n\n  _replaceEl(view) {\n    // always restore the el to ensure the regions el is present before replacing\n    this._restoreEl();\n\n    view.on('before:destroy', this._restoreEl, this);\n\n    this.replaceEl(view.el, this.el);\n\n    this._isReplaced = true;\n  },\n\n  // Restore the region's element in the DOM.\n  _restoreEl() {\n    // There is nothing to replace\n    if (!this._isReplaced) {\n      return;\n    }\n\n    const view = this.currentView;\n\n    if (!view) {\n      return;\n    }\n\n    this.replaceEl(this.el, view.el);\n\n    this._isReplaced = false;\n  },\n\n  // Check to see if the region's el was replaced.\n  isReplaced() {\n    return !!this._isReplaced;\n  },\n\n  // Check to see if a view is being swapped by another\n  isSwappingView() {\n    return !!this._isSwappingView;\n  },\n\n  // Override this method to change how the new view is appended to the `$el` that the\n  // region is managing\n  attachHtml(view) {\n    this.appendChildren(this.el, view.el);\n  },\n\n  // Destroy the current view, if there is one. If there is no current view, it does\n  // nothing and returns immediately.\n  empty(options = { allowMissingEl: true }) {\n    const view = this.currentView;\n\n    // If there is no view in the region we should only detach current html\n    if (!view) {\n      if (this._ensureElement(options)) {\n        this.detachHtml();\n      }\n      return this;\n    }\n\n    const shouldDestroy = !options.preventDestroy;\n\n    if (!shouldDestroy) {\n      deprecate('The preventDestroy option is deprecated. Use Region#detachView');\n    }\n\n    this._empty(view, shouldDestroy);\n    return this;\n  },\n\n  _empty(view, shouldDestroy) {\n    view.off('destroy', this._empty, this);\n    this.triggerMethod('before:empty', this, view);\n\n    this._restoreEl();\n\n    delete this.currentView;\n\n    if (!view._isDestroyed) {\n      if (shouldDestroy) {\n        this.removeView(view);\n      } else {\n        this._detachView(view);\n      }\n      this._stopChildViewEvents(view);\n    }\n\n    this.triggerMethod('empty', this, view);\n  },\n\n  _stopChildViewEvents(view) {\n    const parentView = this._parentView;\n\n    if (!parentView) { return; }\n\n    this._parentView.stopListening(view);\n  },\n\n  destroyView(view) {\n    if (view._isDestroyed) {\n      return this;\n    }\n\n    if (view.destroy) {\n      view.destroy();\n    } else {\n      destroyBackboneView(view);\n    }\n    return this;\n  },\n\n  removeView(view) {\n    this.destroyView(view);\n  },\n\n  detachView() {\n    const view = this.currentView;\n\n    if (!view) {\n      return;\n    }\n\n    this._empty(view);\n\n    return view;\n  },\n\n  _detachView(view) {\n    const shouldTriggerDetach = !!view._isAttached;\n    if (shouldTriggerDetach) {\n      triggerMethodOn(view, 'before:detach', view);\n    }\n\n    this.detachHtml();\n\n    if (shouldTriggerDetach) {\n      view._isAttached = false;\n      triggerMethodOn(view, 'detach', view);\n    }\n  },\n\n  // Override this method to change how the region detaches current content\n  detachHtml() {\n    this.detachContents(this.el);\n  },\n\n  // Checks whether a view is currently present within the region. Returns `true` if there is\n  // and `false` if no view is present.\n  hasView() {\n    return !!this.currentView;\n  },\n\n  // Reset the region by destroying any existing view and clearing out the cached `$el`.\n  // The next time a view is shown via this region, the region will re-query the DOM for\n  // the region's `el`.\n  reset(options) {\n    this.empty(options);\n\n    if (this.$el) {\n      this.el = this._initEl;\n    }\n\n    delete this.$el;\n    return this;\n  },\n\n  destroy(options) {\n    this.reset(options);\n    return MarionetteObject.prototype.destroy.apply(this, arguments);\n  }\n});\n\n_.extend(Region.prototype, DomMixin);\n\nexport default Region;\n","import _ from 'underscore';\nimport _invoke from '../utils/invoke';\nimport buildRegion from '../common/build-region';\nimport Region from '../region';\n\n// MixinOptions\n// - regions\n// - regionClass\n\nexport default {\n  regionClass: Region,\n\n  // Internal method to initialize the regions that have been defined in a\n  // `regions` attribute on this View.\n  _initRegions() {\n\n    // init regions hash\n    this.regions = this.regions || {};\n    this._regions = {};\n\n    this.addRegions(_.result(this, 'regions'));\n  },\n\n  // Internal method to re-initialize all of the regions by updating\n  // the `el` that they point to\n  _reInitRegions() {\n    _invoke(this._regions, 'reset');\n  },\n\n  // Add a single region, by name, to the View\n  addRegion(name, definition) {\n    const regions = {};\n    regions[name] = definition;\n    return this.addRegions(regions)[name];\n  },\n\n  // Add multiple regions as a {name: definition, name2: def2} object literal\n  addRegions(regions) {\n    // If there's nothing to add, stop here.\n    if (_.isEmpty(regions)) {\n      return;\n    }\n\n    // Normalize region selectors hash to allow\n    // a user to use the @ui. syntax.\n    regions = this.normalizeUIValues(regions, ['selector', 'el']);\n\n    // Add the regions definitions to the regions property\n    this.regions = _.extend({}, this.regions, regions);\n\n    return this._addRegions(regions);\n  },\n\n  // internal method to build and add regions\n  _addRegions(regionDefinitions) {\n    const defaults = {\n      regionClass: this.regionClass,\n      parentEl: _.partial(_.result, this, 'el')\n    };\n\n    return _.reduce(regionDefinitions, (regions, definition, name) => {\n      regions[name] = buildRegion(definition, defaults);\n      this._addRegion(regions[name], name);\n      return regions;\n    }, {});\n  },\n\n  _addRegion(region, name) {\n    this.triggerMethod('before:add:region', this, name, region);\n\n    region._parentView = this;\n\n    this._regions[name] = region;\n\n    this.triggerMethod('add:region', this, name, region);\n  },\n\n  // Remove a single region from the View, by name\n  removeRegion(name) {\n    const region = this._regions[name];\n\n    this._removeRegion(region, name);\n\n    return region;\n  },\n\n  // Remove all regions from the View\n  removeRegions() {\n    const regions = this.getRegions();\n\n    _.each(this._regions, _.bind(this._removeRegion, this));\n\n    return regions;\n  },\n\n  _removeRegion(region, name) {\n    this.triggerMethod('before:remove:region', this, name, region);\n\n    region.destroy();\n\n    delete this.regions[name];\n    delete this._regions[name];\n\n    this.triggerMethod('remove:region', this, name, region);\n  },\n\n  // Empty all regions in the region manager, but\n  // leave them attached\n  emptyRegions() {\n    const regions = this.getRegions();\n    _invoke(regions, 'empty');\n    return regions;\n  },\n\n  // Checks to see if view contains region\n  // Accepts the region name\n  // hasRegion('main')\n  hasRegion(name) {\n    return !!this.getRegion(name);\n  },\n\n  // Provides access to regions\n  // Accepts the region name\n  // getRegion('main')\n  getRegion(name) {\n    return this._regions[name];\n  },\n\n  // Get all regions\n  getRegions() {\n    return _.clone(this._regions);\n  },\n\n  showChildView(name, view, ...args) {\n    const region = this.getRegion(name);\n    return region.show(view, ...args);\n  },\n\n  detachChildView(name) {\n    return this.getRegion(name).detachView();\n  },\n\n  getChildView(name) {\n    return this.getRegion(name).currentView;\n  }\n\n};\n","// Renderer\n// --------\n\nimport _ from 'underscore';\nimport MarionetteError from '../error';\nimport TemplateCache from '../template-cache';\n\n// Render a template with data by passing in the template\n// selector and the data to render.\nconst Renderer = {\n\n  // Render a template with data. The `template` parameter is\n  // passed to the `TemplateCache` object to retrieve the\n  // template function. Override this method to provide your own\n  // custom rendering and template handling for all of Marionette.\n  render(template, data) {\n    if (!template) {\n      throw new MarionetteError({\n        name: 'TemplateNotFoundError',\n        message: 'Cannot render the template since its false, null or undefined.'\n      });\n    }\n\n    const templateFunc = _.isFunction(template) ? template : TemplateCache.get(template);\n\n    return templateFunc(data);\n  }\n};\n\nexport default Renderer;\n","// View\n// ---------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport isNodeAttached from './common/is-node-attached';\nimport monitorViewEvents from './common/monitor-view-events';\nimport ViewMixin from './mixins/view';\nimport RegionsMixin from './mixins/regions';\nimport Renderer from './config/renderer';\n\nconst ClassOptions = [\n  'behaviors',\n  'childViewEventPrefix',\n  'childViewEvents',\n  'childViewTriggers',\n  'collectionEvents',\n  'events',\n  'modelEvents',\n  'regionClass',\n  'regions',\n  'template',\n  'templateContext',\n  'triggers',\n  'ui'\n];\n\n// The standard view. Includes view events, automatic rendering\n// of Underscore templates, nested views, and more.\nconst View = Backbone.View.extend({\n\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this._initRegions();\n\n    const args = Array.prototype.slice.call(arguments);\n    args[0] = this.options;\n    Backbone.View.prototype.constructor.apply(this, args);\n\n    this.delegateEntityEvents();\n  },\n\n  // Serialize the view's model *or* collection, if\n  // it exists, for the template\n  serializeData() {\n    if (!this.model && !this.collection) {\n      return {};\n    }\n\n    // If we have a model, we serialize that\n    if (this.model) {\n      return this.serializeModel();\n    }\n\n    // Otherwise, we serialize the collection,\n    // making it available under the `items` property\n    return {\n      items: this.serializeCollection()\n    };\n  },\n\n  // Prepares the special `model` property of a view\n  // for being displayed in the template. By default\n  // we simply clone the attributes. Override this if\n  // you need a custom transformation for your view's model\n  serializeModel() {\n    if (!this.model) { return {}; }\n    return _.clone(this.model.attributes);\n  },\n\n  // Serialize a collection by cloning each of\n  // its model's attributes\n  serializeCollection() {\n    if (!this.collection) { return {}; }\n    return this.collection.map(function(model) { return _.clone(model.attributes); });\n  },\n\n  // Overriding Backbone.View's `setElement` to handle\n  // if an el was previously defined. If so, the view might be\n  // rendered or attached on setElement.\n  setElement() {\n    const hasEl = !!this.el;\n\n    Backbone.View.prototype.setElement.apply(this, arguments);\n\n    if (hasEl) {\n      this._isRendered = !!this.$el.length;\n      this._isAttached = isNodeAttached(this.el);\n    }\n\n    if (this._isRendered) {\n      this.bindUIElements();\n    }\n\n    return this;\n  },\n\n  // Render the view, defaulting to underscore.js templates.\n  // You can override this in your view definition to provide\n  // a very specific rendering for your view. In general, though,\n  // you should override the `Marionette.Renderer` object to\n  // change how Marionette renders views.\n  // Subsequent renders after the first will re-render all nested\n  // views.\n  render() {\n    if (this._isDestroyed) { return this; }\n\n    this.triggerMethod('before:render', this);\n\n    // If this is not the first render call, then we need to\n    // re-initialize the `el` for each region\n    if (this._isRendered) {\n      this._reInitRegions();\n    }\n\n    this._renderTemplate();\n    this.bindUIElements();\n\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n\n    return this;\n  },\n\n  // Internal method to render the template with the serialized data\n  // and template context via the `Marionette.Renderer` object.\n  _renderTemplate() {\n    const template = this.getTemplate();\n\n    // Allow template-less views\n    if (template === false) {\n      return;\n    }\n\n    // Add in entity data and template context\n    const data = this.mixinTemplateContext(this.serializeData());\n\n    // Render and add to el\n    const html = Renderer.render(template, data, this);\n    this.attachElContent(html);\n  },\n\n  // Get the template for this view\n  // instance. You can set a `template` attribute in the view\n  // definition or pass a `template: \"whatever\"` parameter in\n  // to the constructor options.\n  getTemplate() {\n    return this.template;\n  },\n\n  // Mix in template context methods. Looks for a\n  // `templateContext` attribute, which can either be an\n  // object literal, or a function that returns an object\n  // literal. All methods and attributes from this object\n  // are copies to the object passed in.\n  mixinTemplateContext(target = {}) {\n    const templateContext = _.result(this, 'templateContext');\n    return _.extend(target, templateContext);\n  },\n\n  // Attaches the content of a given view.\n  // This method can be overridden to optimize rendering,\n  // or to render in a non standard way.\n  //\n  // For example, using `innerHTML` instead of `$el.html`\n  //\n  // ```js\n  // attachElContent(html) {\n  //   this.el.innerHTML = html;\n  //   return this;\n  // }\n  // ```\n  attachElContent(html) {\n    this.setInnerContent(this.el, html);\n\n    return this;\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this.removeRegions();\n  },\n\n  _getImmediateChildren() {\n    return _.chain(this.getRegions())\n      .map('currentView')\n      .compact()\n      .value();\n  }\n});\n\n_.extend(View.prototype, ViewMixin, RegionsMixin);\n\nexport default View;\n","// Mix in methods from Underscore, for iteration, and other\n// collection related features.\n// Borrowing this code from Backbone.Collection:\n// https://github.com/jashkenas/backbone/blob/1.1.2/backbone.js#L962\n\nimport _ from 'underscore';\n\nconst methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',\n                'select', 'reject', 'every', 'all', 'some', 'any', 'include',\n                'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',\n                'last', 'without', 'isEmpty', 'pluck', 'reduce'];\n\nconst emulateCollection = function(object, listProperty) {\n  _.each(methods, function(method) {\n    object[method] = function() {\n      const list = _.values(_.result(this, listProperty));\n      const args = [list].concat(_.toArray(arguments));\n      return _[method].apply(_, args);\n    };\n  });\n};\n\nexport default emulateCollection;\n","import _ from 'underscore';\nimport emulateCollection from './utils/emulate-collection';\n\n// Provide a container to store, retrieve and\n// shut down child views.\nconst Container = function(views) {\n  this._views = {};\n  this._indexByModel = {};\n  this._indexByCustom = {};\n  this._updateLength();\n\n  _.each(views, _.bind(this.add, this));\n};\n\nemulateCollection(Container.prototype, '_views');\n\n// Container Methods\n// -----------------\n\n_.extend(Container.prototype, {\n\n  // Add a view to this container. Stores the view\n  // by `cid` and makes it searchable by the model\n  // cid (and model itself). Optionally specify\n  // a custom key to store an retrieve the view.\n  add(view, customIndex) {\n    return this._add(view, customIndex)._updateLength();\n  },\n\n  // To be used when avoiding call _updateLength\n  // When you are done adding all your new views\n  // call _updateLength\n  _add(view, customIndex) {\n    const viewCid = view.cid;\n\n    // store the view\n    this._views[viewCid] = view;\n\n    // index it by model\n    if (view.model) {\n      this._indexByModel[view.model.cid] = viewCid;\n    }\n\n    // index by custom\n    if (customIndex) {\n      this._indexByCustom[customIndex] = viewCid;\n    }\n\n    return this;\n  },\n\n  // Find a view by the model that was attached to\n  // it. Uses the model's `cid` to find it.\n  findByModel(model) {\n    return this.findByModelCid(model.cid);\n  },\n\n  // Find a view by the `cid` of the model that was attached to\n  // it. Uses the model's `cid` to find the view `cid` and\n  // retrieve the view using it.\n  findByModelCid(modelCid) {\n    const viewCid = this._indexByModel[modelCid];\n    return this.findByCid(viewCid);\n  },\n\n  // Find a view by a custom indexer.\n  findByCustom(index) {\n    const viewCid = this._indexByCustom[index];\n    return this.findByCid(viewCid);\n  },\n\n  // Find by index. This is not guaranteed to be a\n  // stable index.\n  findByIndex(index) {\n    return _.values(this._views)[index];\n  },\n\n  // retrieve a view by its `cid` directly\n  findByCid(cid) {\n    return this._views[cid];\n  },\n\n  // Remove a view\n  remove(view) {\n    return this._remove(view)._updateLength();\n  },\n\n  // To be used when avoiding call _updateLength\n  // When you are done adding all your new views\n  // call _updateLength\n  _remove(view) {\n    const viewCid = view.cid;\n\n    // delete model index\n    if (view.model) {\n      delete this._indexByModel[view.model.cid];\n    }\n\n    // delete custom index\n    _.some(this._indexByCustom, _.bind(function(cid, key) {\n      if (cid === viewCid) {\n        delete this._indexByCustom[key];\n        return true;\n      }\n    }, this));\n\n    // remove the view from the container\n    delete this._views[viewCid];\n\n    return this;\n  },\n\n  // Update the `.length` attribute on this container\n  _updateLength() {\n    this.length = _.size(this._views);\n\n    return this;\n  }\n});\n\nexport default Container;\n","// Collection View\n// ---------------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport destroyBackboneView from './utils/destroy-backbone-view';\nimport isNodeAttached from './common/is-node-attached';\nimport monitorViewEvents from './common/monitor-view-events';\nimport { triggerMethodOn } from './common/trigger-method';\nimport ChildViewContainer from './child-view-container';\nimport MarionetteError from './error';\nimport ViewMixin from './mixins/view';\n\nconst ClassOptions = [\n  'behaviors',\n  'childView',\n  'childViewEventPrefix',\n  'childViewEvents',\n  'childViewOptions',\n  'childViewTriggers',\n  'collectionEvents',\n  'events',\n  'filter',\n  'emptyView',\n  'emptyViewOptions',\n  'modelEvents',\n  'reorderOnSort',\n  'sort',\n  'triggers',\n  'ui',\n  'viewComparator'\n];\n\n// A view that iterates over a Backbone.Collection\n// and renders an individual child view for each model.\nconst CollectionView = Backbone.View.extend({\n\n  // flag for maintaining the sorted order of the collection\n  sort: true,\n\n  // constructor\n  // option to pass `{sort: false}` to prevent the `CollectionView` from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  //\n  // option to pass `{viewComparator: compFunction()}` to allow the `CollectionView`\n  // to use a custom sort order for the collection.\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this.once('render', this._initialEvents);\n    this._initChildViewStorage();\n    this._bufferedChildren = [];\n\n    const args = Array.prototype.slice.call(arguments);\n    args[0] = this.options;\n    Backbone.View.prototype.constructor.apply(this, args);\n\n    this.delegateEntityEvents();\n  },\n\n  // Instead of inserting elements one by one into the page, it's much more performant to insert\n  // elements into a document fragment and then insert that document fragment into the page\n  _startBuffering() {\n    this._isBuffering = true;\n  },\n\n  _endBuffering() {\n    const shouldTriggerAttach = !!this._isAttached;\n    const triggerOnChildren = shouldTriggerAttach ? this._getImmediateChildren() : [];\n\n    this._isBuffering = false;\n\n    _.each(triggerOnChildren, child => {\n      triggerMethodOn(child, 'before:attach', child);\n    });\n\n    this.attachBuffer(this, this._createBuffer());\n\n    _.each(triggerOnChildren, child => {\n      child._isAttached = true;\n      triggerMethodOn(child, 'attach', child);\n    });\n\n    this._bufferedChildren = [];\n  },\n\n  _getImmediateChildren() {\n    return _.values(this.children._views);\n  },\n\n  // Configured the initial events that the collection view binds to.\n  _initialEvents() {\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'update', this._onCollectionUpdate);\n      this.listenTo(this.collection, 'reset', this.render);\n\n      if (this.sort) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Handle a child added to the collection\n  _onCollectionAdd(child, collection, opts) {\n    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\n    let index = opts.at !== undefined && (opts.index || collection.indexOf(child));\n\n    // When filtered or when there is no initial index, calculate index.\n    if (this.filter || index === false) {\n      index = _.indexOf(this._filteredSortedModels(index), child);\n    }\n\n    if (this._shouldAddChild(child, index)) {\n      this._destroyEmptyView();\n      this._addChild(child, index)\n    }\n  },\n\n  // Handle collection update model removals\n  _onCollectionUpdate(collection, options) {\n    const changes = options.changes;\n    this._removeChildModels(changes.removed);\n  },\n\n  // Remove the child views and destroy them.\n  // This function also updates the indices of later views\n  // in the collection in order to keep the children in sync with the collection.\n  // \"models\" is an array of models and the corresponding views\n  // will be removed and destroyed from the CollectionView\n  _removeChildModels(models) {\n    // Used to determine where to update the remaining\n    // sibling view indices after these views are removed.\n    const removedViews = this._getRemovedViews(models);\n\n    if (!removedViews.length) {\n      return;\n    }\n\n    this.children._updateLength();\n\n    // decrement the index of views after this one\n    this._updateIndices(removedViews, false);\n\n    if (this.isEmpty()) {\n      this._showEmptyView();\n    }\n  },\n\n  // Returns the views that will be used for re-indexing\n  // through CollectionView#_updateIndices.\n  _getRemovedViews(models) {\n\n    // Returning a view means something was removed.\n    return _.reduce(models, (removingViews, model) => {\n      const view = model && this.children.findByModel(model);\n\n      if (!view || view._isDestroyed) {\n        return removingViews;\n      }\n\n      this._removeChildView(view);\n\n      removingViews.push(view);\n\n      return removingViews;\n    }, []);\n  },\n\n  _removeChildView(view) {\n    this.triggerMethod('before:remove:child', this, view);\n\n    this.children._remove(view);\n    if (view.destroy) {\n      view.destroy();\n    } else {\n      destroyBackboneView(view);\n    }\n\n    this.stopListening(view);\n    this.triggerMethod('remove:child', this, view);\n  },\n\n  // Overriding Backbone.View's `setElement` to handle\n  // if an el was previously defined. If so, the view might be\n  // attached on setElement.\n  setElement() {\n    const hasEl = !!this.el;\n\n    Backbone.View.prototype.setElement.apply(this, arguments);\n\n    if (hasEl) {\n      this._isAttached = isNodeAttached(this.el);\n    }\n\n    return this;\n  },\n\n  // Render children views. Override this method to provide your own implementation of a\n  // render function for the collection view.\n  render() {\n    if (this._isDestroyed) { return this; }\n    this.triggerMethod('before:render', this);\n    this._renderChildren();\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\n  // collection view, we are only adding or removing the related childrenViews.\n  setFilter(filter, {preventRender} = {}) {\n    const canBeRendered = this._isRendered && !this._isDestroyed;\n    const filterChanged = this.filter !== filter;\n    const shouldRender = canBeRendered && filterChanged && !preventRender;\n\n    if (shouldRender) {\n      const previousModels = this._filteredSortedModels();\n      this.filter = filter;\n      const models = this._filteredSortedModels();\n      this._applyModelDeltas(models, previousModels);\n    } else {\n      this.filter = filter;\n    }\n\n    return this;\n  },\n\n  // `removeFilter` is actually an alias for removing filters.\n  removeFilter(options) {\n    return this.setFilter(null, options);\n  },\n\n  // Calculate and apply difference by cid between `models` and `previousModels`.\n  _applyModelDeltas(models, previousModels) {\n    const currentIds = {};\n    _.each(models, (model, index) => {\n      const addedChildNotExists = !this.children.findByModel(model);\n      if (addedChildNotExists) {\n        this._onCollectionAdd(model, this.collection, {at: index});\n      }\n      currentIds[model.cid] = true;\n    });\n\n    const removeModels = _.filter(previousModels, (prevModel) => {\n      return !currentIds[prevModel.cid] && this.children.findByModel(prevModel);\n    });\n\n    this._removeChildModels(removeModels);\n  },\n\n  // Reorder DOM after sorting. When your element's rendering do not use their index,\n  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\n  // rendering all the collectionView.\n  reorder() {\n    const children = this.children;\n    const models = this._filteredSortedModels();\n\n    if (!models.length && this._showingEmptyView) { return this; }\n\n    const anyModelsAdded = _.some(models, function(model) {\n      return !children.findByModel(model);\n    });\n\n    // If there are any new models added due to filtering we need to add child views,\n    // so render as normal.\n    if (anyModelsAdded) {\n      this.render();\n    } else {\n\n      const filteredOutModels = [];\n\n      // Get the DOM nodes in the same order as the models and\n      // find the model that were children before but aren't in this new order.\n      const elsToReorder = children.reduce(function(viewEls, view) {\n        const index = _.indexOf(models, view.model);\n\n        if (index === -1) {\n          filteredOutModels.push(view.model);\n          return viewEls;\n        }\n\n        view._index = index;\n\n        viewEls[index] = view.el;\n\n        return viewEls;\n      }, new Array(models.length));\n\n      this.triggerMethod('before:reorder', this);\n\n      // Since append moves elements that are already in the DOM, appending the elements\n      // will effectively reorder them.\n      this._appendReorderedChildren(elsToReorder);\n\n      // remove any views that have been filtered out\n      this._removeChildModels(filteredOutModels);\n\n      this.triggerMethod('reorder', this);\n    }\n    return this;\n  },\n\n  // Render view after sorting. Override this method to change how the view renders\n  // after a `sort` on the collection.\n  resortView() {\n    if (this.reorderOnSort) {\n      this.reorder();\n    } else {\n      this._renderChildren();\n    }\n    return this;\n  },\n\n  // Internal method. This checks for any changes in the order of the collection.\n  // If the index of any view doesn't match, it will render.\n  _sortViews() {\n    const models = this._filteredSortedModels();\n\n    // check for any changes in sort order of views\n    const orderChanged = _.find(models, (item, index) => {\n      const view = this.children.findByModel(item);\n      return !view || view._index !== index;\n    });\n\n    if (orderChanged) {\n      this.resortView();\n    }\n  },\n\n  // Internal reference to what index a `emptyView` is.\n  _emptyViewIndex: -1,\n\n  // Internal method. Separated so that CompositeView can append to the childViewContainer\n  // if necessary\n  _appendReorderedChildren(children) {\n    this.appendChildren(this.el, children);\n  },\n\n  // Internal method. Separated so that CompositeView can have more control over events\n  // being triggered, around the rendering process\n  _renderChildren() {\n    if (this._isRendered) {\n      this._destroyEmptyView();\n      this._destroyChildren();\n    }\n\n    const models = this._filteredSortedModels();\n    if (this.isEmpty({processedModels: models})) {\n      this._showEmptyView();\n    } else {\n      this.triggerMethod('before:render:children', this);\n      this._startBuffering();\n      this._showCollection(models);\n      this._endBuffering();\n      this.triggerMethod('render:children', this);\n    }\n  },\n\n  _createView(model, index) {\n    const ChildView = this._getChildView(model);\n    const childViewOptions = this._getChildViewOptions(model, index);\n    const view = this.buildChildView(model, ChildView, childViewOptions);\n    return view;\n  },\n\n  _setupChildView(view, index) {\n    monitorViewEvents(view);\n\n    // set up the child view event forwarding\n    this._proxyChildViewEvents(view);\n\n    if (this.sort) {\n      view._index = index;\n    }\n  },\n\n  // Internal method to loop through collection and show each child view.\n  _showCollection(models) {\n    _.each(models, _.bind(this._addChild, this));\n    this.children._updateLength();\n  },\n\n  // Allow the collection to be sorted by a custom view comparator\n  _filteredSortedModels(addedAt) {\n    if (!this.collection || !this.collection.length) { return []; }\n\n    const viewComparator = this.getViewComparator();\n    let models = this.collection.models;\n    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\n\n    if (viewComparator) {\n      let addedModel;\n      // Preserve `at` location, even for a sorted view\n      if (addedAt) {\n        addedModel = models[addedAt];\n        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\n      }\n      models = this._sortModelsBy(models, viewComparator);\n      if (addedModel) {\n        models.splice(addedAt, 0, addedModel);\n      }\n    }\n\n    // Filter after sorting in case the filter uses the index\n    models = this._filterModels(models);\n\n    return models;\n  },\n\n  getViewComparator() {\n    return this.viewComparator;\n  },\n\n  // Filter an array of models, if a filter exists\n  _filterModels(models) {\n    if (this.filter) {\n      models = _.filter(models, (model, index) => {\n        return this._shouldAddChild(model, index);\n      });\n    }\n    return models;\n  },\n\n  _sortModelsBy(models, comparator) {\n    if (typeof comparator === 'string') {\n      return _.sortBy(models, (model) => {\n        return model.get(comparator);\n      });\n    } else if (comparator.length === 1) {\n      return _.sortBy(models, _.bind(comparator, this));\n    } else {\n      return _.clone(models).sort(_.bind(comparator, this));\n    }\n  },\n\n  // Internal method to show an empty view in place of a collection of child views,\n  // when the collection is empty\n  _showEmptyView() {\n    const EmptyView = this._getEmptyView();\n\n    if (EmptyView && !this._showingEmptyView) {\n      this._showingEmptyView = true;\n\n      const model = new Backbone.Model();\n      let emptyViewOptions =\n        this.emptyViewOptions || this.childViewOptions;\n      if (_.isFunction(emptyViewOptions)) {\n        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\n      }\n\n      const view = this.buildChildView(model, EmptyView, emptyViewOptions);\n\n      this.triggerMethod('before:render:empty', this, view);\n      this.addChildView(view, 0);\n      this.triggerMethod('render:empty', this, view);\n    }\n  },\n\n  // Internal method to destroy an existing emptyView instance if one exists. Called when\n  // a collection view has been rendered empty, and then a child is added to the collection.\n  _destroyEmptyView() {\n    if (this._showingEmptyView) {\n      this.triggerMethod('before:remove:empty', this);\n\n      this._destroyChildren();\n      delete this._showingEmptyView;\n\n      this.triggerMethod('remove:empty', this);\n    }\n  },\n\n  // Retrieve the empty view class\n  _getEmptyView() {\n    const emptyView = this.emptyView;\n\n    if (!emptyView) { return; }\n\n    return this._getView(emptyView);\n  },\n\n  // Retrieve the `childView` class\n  // The `childView` property can be either a view class or a function that\n  // returns a view class. If it is a function, it will receive the model that\n  // will be passed to the view instance (created from the returned view class)\n  _getChildView(child) {\n    let childView = this.childView;\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'NoChildViewError',\n        message: 'A \"childView\" must be specified'\n      });\n    }\n\n    childView = this._getView(childView, child);\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n    return childView;\n  },\n\n  // First check if the `view` is a view class (the common case)\n  // Then check if it's a function (which we assume that returns a view class)\n  _getView(view, child) {\n    if (view.prototype instanceof Backbone.View || view === Backbone.View) {\n      return view;\n    } else if (_.isFunction(view)) {\n      return view.call(this, child);\n    }\n  },\n\n  // Internal method for building and adding a child view\n  _addChild(child, index) {\n    const view = this._createView(child, index);\n    this.addChildView(view, index);\n\n    return view;\n  },\n\n  _getChildViewOptions(child, index) {\n    if (_.isFunction(this.childViewOptions)) {\n      return this.childViewOptions(child, index);\n    }\n\n    return this.childViewOptions;\n  },\n\n  // Render the child's view and add it to the HTML for the collection view at a given index.\n  // This will also update the indices of later views in the collection in order to keep the\n  // children in sync with the collection.\n  addChildView(view, index) {\n    this.triggerMethod('before:add:child', this, view);\n    this._setupChildView(view, index);\n\n    // Store the child view itself so we can properly remove and/or destroy it later\n    if (this._isBuffering) {\n      // Add to children, but don't update children's length.\n      this.children._add(view);\n    } else {\n      // increment indices of views after this one\n      this._updateIndices(view, true);\n      this.children.add(view);\n    }\n\n    this._renderView(view);\n\n    this._attachView(view, index);\n\n    this.triggerMethod('add:child', this, view);\n\n    return view;\n  },\n\n  // Internal method. This decrements or increments the indices of views after the added/removed\n  // view to keep in sync with the collection.\n  _updateIndices(views, increment) {\n    if (!this.sort) {\n      return;\n    }\n\n    if (!increment) {\n      _.each(_.sortBy(this.children._views, '_index'), (view, index) => {\n        view._index = index;\n      });\n\n      return;\n    }\n\n    const view = _.isArray(views) ? _.max(views, '_index') : views;\n\n    if (_.isObject(view)) {\n      // update the indexes of views after this one\n      this.children.each((laterView) => {\n        if (laterView._index >= view._index) {\n          laterView._index += 1;\n        }\n      });\n    }\n  },\n\n  _renderView(view) {\n    if (view._isRendered) {\n      return;\n    }\n\n    if (!view.supportsRenderLifecycle) {\n      triggerMethodOn(view, 'before:render', view);\n    }\n\n    view.render();\n\n    if (!view.supportsRenderLifecycle) {\n      view._isRendered = true;\n      triggerMethodOn(view, 'render', view);\n    }\n  },\n\n  _attachView(view, index) {\n    // Only trigger attach if already attached and not buffering,\n    // otherwise _endBuffering() or Region#show() handles this.\n    const shouldTriggerAttach = !view._isAttached && !this._isBuffering && this._isAttached;\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    this.attachHtml(this, view, index);\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n  },\n\n  // Build a `childView` for a model in the collection.\n  buildChildView(child, ChildViewClass, childViewOptions) {\n    const options = _.extend({model: child}, childViewOptions);\n    return new ChildViewClass(options);\n  },\n\n  // Remove the child view and destroy it. This function also updates the indices of later views\n  // in the collection in order to keep the children in sync with the collection.\n  removeChildView(view) {\n    if (!view || view._isDestroyed) {\n      return view;\n    }\n\n    this._removeChildView(view);\n    this.children._updateLength();\n    // decrement the index of views after this one\n    this._updateIndices(view, false);\n    return view;\n  },\n\n  // check if the collection is empty or optionally whether an array of pre-processed models is empty\n  isEmpty(options) {\n    let models;\n    if (_.result(options, 'processedModels')) {\n      models = options.processedModels;\n    } else {\n      models = this.collection ? this.collection.models : [];\n      models = this._filterModels(models);\n    }\n    return models.length === 0;\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(collectionView, buffer) {\n    this.appendChildren(collectionView.el, buffer);\n  },\n\n  // Create a fragment buffer from the currently buffered children\n  _createBuffer() {\n    const elBuffer = this.createBuffer();\n    _.each(this._bufferedChildren, (b) => {\n      this.appendChildren(elBuffer, b.el);\n    });\n    return elBuffer;\n  },\n\n  // Append the HTML to the collection's `el`. Override this method to do something other\n  // than `.append`.\n  attachHtml(collectionView, childView, index) {\n    if (collectionView._isBuffering) {\n      // buffering happens on reset events and initial renders\n      // in order to reduce the number of inserts into the\n      // document, which are expensive.\n      collectionView._bufferedChildren.splice(index, 0, childView);\n    } else {\n      // If we've already rendered the main collection, append\n      // the new child into the correct order if we need to. Otherwise\n      // append to the end.\n      if (!collectionView._insertBefore(childView, index)) {\n        collectionView._insertAfter(childView);\n      }\n    }\n  },\n\n  // Internal method. Check whether we need to insert the view into the correct position.\n  _insertBefore(childView, index) {\n    let currentView;\n    const findPosition = this.sort && (index < this.children.length - 1);\n    if (findPosition) {\n      // Find the view after this one\n      currentView = this.children.find((view) => {\n        return view._index === index + 1;\n      });\n    }\n\n    if (currentView) {\n      this.beforeEl(currentView.el, childView.el);\n      return true;\n    }\n\n    return false;\n  },\n\n  // Internal method. Append a view to the end of the $el\n  _insertAfter(childView) {\n    this.appendChildren(this.el, childView.el);\n  },\n\n  // Internal method to set up the `children` object for storing all of the child views\n  _initChildViewStorage() {\n    this.children = new ChildViewContainer();\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this._destroyChildren();\n  },\n\n  // Destroy the child views that this collection view is holding on to, if any\n  _destroyChildren(options) {\n    if (!this.children.length) {\n      return;\n    }\n\n    this.triggerMethod('before:destroy:children', this);\n    this.children.each(_.bind(this._removeChildView, this));\n    this.children._updateLength();\n    this.triggerMethod('destroy:children', this);\n  },\n\n  // Return true if the given child should be shown. Return false otherwise.\n  // The filter will be passed (child, index, collection), where\n  //  'child' is the given model\n  //  'index' is the index of that model in the collection\n  //  'collection' is the collection referenced by this CollectionView\n  _shouldAddChild(child, index) {\n    const filter = this.filter;\n    return !_.isFunction(filter) || filter.call(this, child, index, this.collection);\n  }\n});\n\n_.extend(CollectionView.prototype, ViewMixin);\n\nexport default CollectionView;\n","// Composite View\n// --------------\n\nimport _ from 'underscore';\nimport deprecate from './utils/deprecate';\nimport MarionetteError from './error';\nimport CollectionView from './collection-view';\nimport View from './view';\n\nconst ClassOptions = [\n  'childViewContainer',\n  'template',\n  'templateContext'\n];\n\n// Used for rendering a branch-leaf, hierarchical structure.\n// Extends directly from CollectionView\n// @deprecated\nconst CompositeView = CollectionView.extend({\n\n  // Setting up the inheritance chain which allows changes to\n  // Marionette.CollectionView.prototype.constructor which allows overriding\n  // option to pass '{sort: false}' to prevent the CompositeView from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  constructor(options) {\n    deprecate('CompositeView is deprecated. Convert to View at your earliest convenience');\n\n    this.mergeOptions(options, ClassOptions);\n\n    CollectionView.prototype.constructor.apply(this, arguments);\n  },\n\n  // Configured the initial events that the composite view\n  // binds to. Override this method to prevent the initial\n  // events, or to add your own initial events.\n  _initialEvents() {\n\n    // Bind only after composite view is rendered to avoid adding child views\n    // to nonexistent childViewContainer\n\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'update', this._onCollectionUpdate);\n      this.listenTo(this.collection, 'reset', this.renderChildren);\n\n      if (this.sort) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Retrieve the `childView` to be used when rendering each of\n  // the items in the collection. The default is to return\n  // `this.childView` or Marionette.CompositeView if no `childView`\n  // has been defined. As happens in CollectionView, `childView` can\n  // be a function (which should return a view class).\n  _getChildView(child) {\n    let childView = this.childView;\n\n    // for CompositeView, if `childView` is not specified, we'll get the same\n    // composite view class rendered for each child in the collection\n    // then check if the `childView` is a view class (the common case)\n    // finally check if it's a function (which we assume that returns a view class)\n    if (!childView) {\n      return this.constructor;\n    }\n\n    childView = this._getView(childView, child);\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n    return childView;\n  },\n\n  // Return the serialized model\n  serializeData() {\n    return this.serializeModel();\n  },\n\n  // Renders the model and the collection.\n  render() {\n    if (this._isDestroyed) { return this; }\n    this._isRendering = true;\n    this.resetChildViewContainer();\n\n    this.triggerMethod('before:render', this);\n\n    this._renderTemplate();\n    this.bindUIElements();\n    this.renderChildren();\n\n    this._isRendering = false;\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  renderChildren() {\n    if (this._isRendered || this._isRendering) {\n      CollectionView.prototype._renderChildren.call(this);\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(compositeView, buffer) {\n    const $container = this.getChildViewContainer(compositeView);\n    this.appendChildren($container, buffer);\n  },\n\n  // Internal method. Append a view to the end of the $el.\n  // Overidden from CollectionView to ensure view is appended to\n  // childViewContainer\n  _insertAfter(childView) {\n    const $container = this.getChildViewContainer(this, childView);\n    this.appendChildren($container, childView.el);\n  },\n\n  // Internal method. Append reordered childView'.\n  // Overidden from CollectionView to ensure reordered views\n  // are appended to childViewContainer\n  _appendReorderedChildren(children) {\n    const $container = this.getChildViewContainer(this);\n    this.appendChildren($container, children);\n  },\n\n  // Internal method to ensure an `$childViewContainer` exists, for the\n  // `attachHtml` method to use.\n  getChildViewContainer(containerView, childView) {\n    if (!!containerView.$childViewContainer) {\n      return containerView.$childViewContainer;\n    }\n\n    let container;\n    const childViewContainer = containerView.childViewContainer;\n    if (childViewContainer) {\n\n      const selector = _.result(containerView, 'childViewContainer');\n\n      if (selector.charAt(0) === '@' && containerView.ui) {\n        container = containerView.ui[selector.substr(4)];\n      } else {\n        container = this.findEls(selector, containerView.$el);\n      }\n\n      if (container.length <= 0) {\n        throw new MarionetteError({\n          name: 'ChildViewContainerMissingError',\n          message: `The specified \"childViewContainer\" was not found: ${containerView.childViewContainer}`\n        });\n      }\n\n    } else {\n      container = containerView.$el;\n    }\n\n    containerView.$childViewContainer = container;\n    return container;\n  },\n\n  // Internal method to reset the `$childViewContainer` on render\n  resetChildViewContainer() {\n    if (this.$childViewContainer) {\n      this.$childViewContainer = undefined;\n    }\n  }\n});\n\n// To prevent duplication but allow the best View organization\n// Certain View methods are mixed directly into the deprecated CompositeView\nconst MixinFromView = _.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', 'mixinTemplateContext', 'attachElContent');\n_.extend(CompositeView.prototype, MixinFromView);\n\nexport default CompositeView;\n","// Behavior\n// --------\n\n// A Behavior is an isolated set of DOM /\n// user interactions that can be mixed into any View.\n// Behaviors allow you to blackbox View specific interactions\n// into portable logical chunks, keeping your views simple and your code DRY.\n\nimport _ from 'underscore';\nimport getUniqueEventName from './utils/get-unique-event-name';\nimport MarionetteObject from './object';\nimport DelegateEntityEventsMixin from './mixins/delegate-entity-events';\nimport TriggersMixin from './mixins/triggers';\nimport UIMixin from './mixins/ui';\n\nconst ClassOptions = [\n  'collectionEvents',\n  'events',\n  'modelEvents',\n  'triggers',\n  'ui'\n];\n\nconst Behavior = MarionetteObject.extend({\n  cidPrefix: 'mnb',\n\n  constructor(options, view) {\n    // Setup reference to the view.\n    // this comes in handle when a behavior\n    // wants to directly talk up the chain\n    // to the view.\n    this.view = view;\n    this.defaults = _.clone(_.result(this, 'defaults', {}));\n    this._setOptions(this.defaults, options);\n    this.mergeOptions(this.options, ClassOptions);\n\n    // Construct an internal UI hash using\n    // the behaviors UI hash and then the view UI hash.\n    // This allows the user to use UI hash elements\n    // defined in the parent view as well as those\n    // defined in the given behavior.\n    // This order will help the reuse and share of a behavior\n    // between multiple views, while letting a view override a\n    // selector under an UI key.\n    this.ui = _.extend({}, _.result(this, 'ui'), _.result(view, 'ui'));\n\n    MarionetteObject.apply(this, arguments);\n  },\n\n  // proxy behavior $ method to the view\n  // this is useful for doing jquery DOM lookups\n  // scoped to behaviors view.\n  $() {\n    return this.view.$.apply(this.view, arguments);\n  },\n\n  // Stops the behavior from listening to events.\n  // Overrides Object#destroy to prevent additional events from being triggered.\n  destroy() {\n    this.stopListening();\n\n    return this;\n  },\n\n  proxyViewProperties() {\n    this.$el = this.view.$el;\n    this.el = this.view.el;\n\n    return this;\n  },\n\n  bindUIElements() {\n    this._bindUIElements();\n\n    return this;\n  },\n\n  unbindUIElements() {\n    this._unbindUIElements();\n\n    return this;\n  },\n\n  getUI(name) {\n    return this._getUI(name);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents() {\n    this._delegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  undelegateEntityEvents() {\n    this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  getEvents() {\n    // Normalize behavior events hash to allow\n    // a user to use the @ui. syntax.\n    const behaviorEvents = this.normalizeUIKeys(_.result(this, 'events'));\n\n    // binds the handler to the behavior and builds a unique eventName\n    return _.reduce(behaviorEvents, (events, behaviorHandler, key) => {\n      if (!_.isFunction(behaviorHandler)) {\n        behaviorHandler = this[behaviorHandler];\n      }\n      if (!behaviorHandler) { return; }\n      key = getUniqueEventName(key);\n      events[key] = _.bind(behaviorHandler, this);\n      return events;\n    }, {});\n  },\n\n  // Internal method to build all trigger handlers for a given behavior\n  getTriggers() {\n    if (!this.triggers) { return; }\n\n    // Normalize behavior triggers hash to allow\n    // a user to use the @ui. syntax.\n    const behaviorTriggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    return this._getViewTriggers(this.view, behaviorTriggers);\n  }\n\n});\n\n_.extend(Behavior.prototype, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\nexport default Behavior;\n","// Application\n// -----------\nimport buildRegion from './common/build-region';\nimport MarionetteObject from './object';\nimport Region from './region';\n\nconst ClassOptions = [\n  'region',\n  'regionClass'\n];\n\n// A container for a Marionette application.\nconst Application = MarionetteObject.extend({\n  cidPrefix: 'mna',\n\n  constructor(options) {\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    this._initRegion();\n\n    MarionetteObject.prototype.constructor.apply(this, arguments);\n  },\n\n  regionClass: Region,\n\n  _initRegion() {\n    const region = this.region;\n\n    if (!region) { return; }\n\n    const defaults = {\n      regionClass: this.regionClass\n    };\n\n    this._region = buildRegion(region, defaults);\n  },\n\n  getRegion() {\n    return this._region;\n  },\n\n  showView(view, ...args) {\n    const region = this.getRegion();\n    return region.show(view, ...args);\n  },\n\n  getView() {\n    return this.getRegion().currentView;\n  },\n\n  // kick off all of the application's processes.\n  start(options) {\n    this.triggerMethod('before:start', this, options);\n    this.triggerMethod('start', this, options);\n    return this;\n  }\n\n});\n\nexport default Application;\n","// App Router\n// ----------\n\n// Reduce the boilerplate code of handling route events\n// and then calling a single method on another object,\n// called a controller.\n// Have your routers configured to call the method on\n// your controller, directly.\n//\n// Configure an AppRouter with `appRoutes`.\n//\n// App routers can only take one `controller` object.\n// It is recommended that you divide your controller\n// objects in to smaller pieces of related functionality\n// and have multiple routers / controllers, instead of\n// just one giant router and controller.\n//\n// You can also add standard routes to an AppRouter.\n\nimport Backbone from 'backbone';\nimport _ from 'underscore';\nimport { triggerMethod } from './common/trigger-method';\nimport MarionetteError from './error';\nimport CommonMixin from './mixins/common';\n\nconst ClassOptions = [\n  'appRoutes',\n  'controller'\n];\n\nconst AppRouter = Backbone.Router.extend({\n\n  constructor(options) {\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    Backbone.Router.apply(this, arguments);\n\n    const appRoutes = this.appRoutes;\n    const controller = this._getController();\n    this.processAppRoutes(controller, appRoutes);\n    this.on('route', this._processOnRoute, this);\n  },\n\n  // Similar to route method on a Backbone Router but\n  // method is called on the controller\n  appRoute(route, methodName) {\n    const controller = this._getController();\n    this._addAppRoute(controller, route, methodName);\n    return this;\n  },\n\n  // process the route event and trigger the onRoute\n  // method call, if it exists\n  _processOnRoute(routeName, routeArgs) {\n    // make sure an onRoute before trying to call it\n    if (_.isFunction(this.onRoute)) {\n      // find the path that matches the current route\n      const routePath = _.invert(this.appRoutes)[routeName];\n      this.onRoute(routeName, routePath, routeArgs);\n    }\n  },\n\n  // Internal method to process the `appRoutes` for the\n  // router, and turn them in to routes that trigger the\n  // specified method on the specified `controller`.\n  processAppRoutes(controller, appRoutes) {\n    if (!appRoutes) { return this; }\n\n    const routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\n\n    _.each(routeNames, route => {\n      this._addAppRoute(controller, route, appRoutes[route]);\n    });\n\n    return this;\n  },\n\n  _getController() {\n    return this.controller;\n  },\n\n  _addAppRoute(controller, route, methodName) {\n    const method = controller[methodName];\n\n    if (!method) {\n      throw new MarionetteError(`Method \"${methodName}\" was not found on the controller`);\n    }\n\n    this.route(route, methodName, _.bind(method, controller));\n  },\n\n  triggerMethod: triggerMethod\n});\n\n_.extend(AppRouter.prototype, CommonMixin);\n\nexport default AppRouter;\n","import Backbone from 'backbone';\nimport {version} from '../package.json';\n\nimport proxy from './utils/proxy';\nimport extend from './utils/extend';\nimport deprecate from './utils/deprecate';\n\nimport isNodeAttached from './common/is-node-attached';\nimport mergeOptions from './common/merge-options';\nimport getOption from './common/get-option';\nimport normalizeMethods from './common/normalize-methods';\nimport monitorViewEvents from './common/monitor-view-events';\n\nimport {\n  bindEvents,\n  unbindEvents\n} from './common/bind-events';\n\nimport {\n  bindRequests,\n  unbindRequests\n} from './common/bind-requests';\n\nimport {\n  triggerMethod,\n  triggerMethodOn\n} from './common/trigger-method';\n\n\nimport MarionetteObject from './object';\nimport TemplateCache from './template-cache';\nimport View from './view';\nimport CollectionView from './collection-view';\nimport CompositeView from './composite-view';\nimport Behavior from './behavior';\nimport Region from './region';\nimport Application from './application';\nimport AppRouter from './app-router';\nimport MarionetteError from './error';\n\nimport behaviorsLookup from './config/behaviors-lookup';\nimport Renderer from './config/renderer';\n\nimport {\n  FEATURES,\n  isEnabled,\n  setEnabled\n} from './config/features';\n\nconst previousMarionette = Backbone.Marionette;\nconst Marionette = Backbone.Marionette = {};\n\n// This allows you to run multiple instances of Marionette on the same\n// webapp. After loading the new version, call `noConflict()` to\n// get a reference to it. At the same time the old version will be\n// returned to Backbone.Marionette.\nMarionette.noConflict = function() {\n  Backbone.Marionette = previousMarionette;\n  return this;\n};\n\n// Utilities\nMarionette.bindEvents = proxy(bindEvents);\nMarionette.unbindEvents = proxy(unbindEvents);\nMarionette.bindRequests = proxy(bindRequests);\nMarionette.unbindRequests = proxy(unbindRequests);\nMarionette.mergeOptions = proxy(mergeOptions);\nMarionette.getOption = proxy(getOption);\nMarionette.normalizeMethods = proxy(normalizeMethods);\nMarionette.extend = extend;\nMarionette.isNodeAttached = isNodeAttached;\nMarionette.deprecate = deprecate;\nMarionette.triggerMethod = proxy(triggerMethod);\nMarionette.triggerMethodOn = triggerMethodOn;\nMarionette.isEnabled = isEnabled;\nMarionette.setEnabled = setEnabled;\nMarionette.monitorViewEvents = monitorViewEvents;\n\nMarionette.Behaviors = {};\nMarionette.Behaviors.behaviorsLookup = behaviorsLookup;\n\n// Classes\nMarionette.Application = Application;\nMarionette.AppRouter = AppRouter;\nMarionette.Renderer = Renderer;\nMarionette.TemplateCache = TemplateCache;\nMarionette.View = View;\nMarionette.CollectionView = CollectionView;\nMarionette.CompositeView = CompositeView;\nMarionette.Behavior = Behavior;\nMarionette.Region = Region;\nMarionette.Error = MarionetteError;\nMarionette.Object = MarionetteObject;\n\n// Configuration\nMarionette.DEV_MODE = false;\nMarionette.FEATURES = FEATURES;\nMarionette.VERSION = version;\n\nexport default Marionette;\n"]}